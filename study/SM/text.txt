Kaggle Review

ref
https://www.kaggle.com/neilash/team-ndl-algorithms-and-illnesses

감성 분석. 

1. 병마다 당연하게도 리뷰 수가 다르다. 흔한 질병 vs 덜 흔한 질병의 차이

2. 사람들을 정말로 좋거나 나쁜 약의 경우 더 리뷰를 많이 씀.
	양 극단에 비해 중간은 적다.

3. 약별 평점 평균, 상태별 평점 평균 확인 결과 평균이 높은게 더 많음
->표본이 적은 것도 1개로 들어가기에 신뢰도는 애매함

4. rating이 높다고 usefulcount가 높은 건 아님. 하지만 이것도 양 극단이 높아지는 경향을 보임
	2와 같은 맥락으로 보임

5. 높은 rating일수록 평균 usefulcount가 증가하는 경향. 아마 사람들의 포지티브 스크리닝으로 보임

6. usefulcount가 높은 리뷰는 대체로 긍정적, 반대는 부정적

from nltk.sentiment.vader import SentimentIntensityAnalyzer 감정 분석기

-1~1까지의 숫자로 나옴.
리뷰 기반 sentiment와 usefulcount 전반적으로 감정이 잘 드러난 글일 수록 usefulcount가 높다.
rating이 낮으면, 평균 sentiment가 확실히 낮다.

약별 평균  rating확인



Best and Worst Drugs by Condition
약 별로 평균 점수 구하기 -> 증상별로 약 목록 찍어서 내림차순 정렬
쉽게 찾기 가능.


Machine Learning Models
여러 모델 써보고, 분류/회귀 문제로 해결 시도

Classification with sk-learn and Random Forests
랜덤 포레스트 - 리뷰 감정 분석 목적
텍스트 -> 숫자로 변경 필요. vectorization이용 ('review' column)

방법
TF-IDF("a", "the" 등 강조하지 않는 방식으로 정규화)
creates what is known as a bag (multi-set) of words

Such a representation associates a real-valued vector to each review representing the importance of the tokens (words) in the review. This represents the entire corpus of reviews as a large matrix where each row of the matrix represents one of the reviews and each column repreents a token occurence. 이게 뭐소리지..

"a", "the", "she" 등과 같은 단어로 인한 과도한 노이즈를 처리
텍스트의 정서에 대한 많은 통찰력을 제공하지 않기 때문
(정서에 대한 중요한 통찰력을 제공하는 단어들을 난독화하는 경향)

한계
문서 내에서 단어의 상대적 위치를 고려하지 않는다

벡터라이즈 후 Naive Bayes classifier이용
rating 5점 이상이면 호의적인 리뷰로 정의

나이브 베이즈 보다 랜덤포레스트가 더 효과 좋다.
Accuracy: 0.7527247703009337 -> Accuracy: 0.8310084439980657



케라스(신경망 활용)
하기 전에 리뷰 전처리(특수문자 날리기)
CountVectorizer(5000개의 피쳐 행 벡터로 벡터화)
점수 8이상 positive 5~8neutral else negative 3개분위로

신경망 다양하게 돌려보니 softmax가 제일 좋더라.
TF-IDF랑 CountVectorizer랑 거의 비슷한 정확도.
이진수나 소문자 바꿔도 달라지는 거 없음
256unit가 오버핏 없음.
모델에 레이어를 추가하면 레이어 유닛 수를 작게 유지하더라도 정확도가 저하

6개의 에포크 및 128개의 배치 크기가 최적
6개 이상이면 모델이 오버트레인을 시작
기호를 제거하여 리뷰에서 사전 처리를 실행하기 전에 검증 정확도는 약 84%
리뷰 상태에 따라 결과(rating) positive negative, neutral인거 구분 예측

결론.
word vectorize, 감정분석, 사이킥런 선형회귀만 해도 예측 점수가 잘 나온다..

분류도 해보고 회귀도 해봄.
벡터라이즈 -> 신경망 좋다
여러 NN아키텍처 탐색해보면 좋지 않을까.. 반복먹인 네트워크가 NLP 잘 처리한다(LSTM?)
